// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	logic2 "admin-user/rpc/internal/logic"
	svc2 "admin-user/rpc/internal/svc"
	user2 "admin-user/rpc/user"
	"context"
)

type UserServer struct {
	svcCtx *svc2.ServiceContext
}

func NewUserServer(svcCtx *svc2.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

//  user
func (s *UserServer) Login(ctx context.Context, in *user2.LoginRequest) (*user2.LoginResponse, error) {
	l := logic2.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

//  account
func (s *UserServer) LoginOut(ctx context.Context, in *user2.LoginOutRequest) (*user2.LoginOutResponse, error) {
	l := logic2.NewLoginOutLogic(ctx, s.svcCtx)
	return l.LoginOut(in)
}

func (s *UserServer) UpdatePassword(ctx context.Context, in *user2.UpdatePasswordRequest) (*user2.UpdatePasswordResponse, error) {
	l := logic2.NewUpdatePasswordLogic(ctx, s.svcCtx)
	return l.UpdatePassword(in)
}

func (s *UserServer) CheckPermission(ctx context.Context, in *user2.CheckPermissionRequest) (*user2.CheckPermissionResponse, error) {
	l := logic2.NewCheckPermissionLogic(ctx, s.svcCtx)
	return l.CheckPermission(in)
}

//  admin
func (s *UserServer) GetAdmin(ctx context.Context, in *user2.GetAdminRequest) (*user2.GetAdminResponse, error) {
	l := logic2.NewGetAdminLogic(ctx, s.svcCtx)
	return l.GetAdmin(in)
}

func (s *UserServer) AddAdmin(ctx context.Context, in *user2.AddAdminRequest) (*user2.AddAdminResponse, error) {
	l := logic2.NewAddAdminLogic(ctx, s.svcCtx)
	return l.AddAdmin(in)
}

func (s *UserServer) EditAdmin(ctx context.Context, in *user2.EditAdminRequest) (*user2.EditAdminResponse, error) {
	l := logic2.NewEditAdminLogic(ctx, s.svcCtx)
	return l.EditAdmin(in)
}

func (s *UserServer) DeleteAdmin(ctx context.Context, in *user2.DeleteAdminRequest) (*user2.DeleteAdminResponse, error) {
	l := logic2.NewDeleteAdminLogic(ctx, s.svcCtx)
	return l.DeleteAdmin(in)
}

func (s *UserServer) FindAdminByIds(ctx context.Context, in *user2.FindAdminByIdsRequest) (*user2.FindAdminByIdsResponse, error) {
	l := logic2.NewFindAdminByIdsLogic(ctx, s.svcCtx)
	return l.FindAdminByIds(in)
}

//  role
func (s *UserServer) GetRole(ctx context.Context, in *user2.GetRoleRequest) (*user2.GetRoleResponse, error) {
	l := logic2.NewGetRoleLogic(ctx, s.svcCtx)
	return l.GetRole(in)
}

func (s *UserServer) AddRole(ctx context.Context, in *user2.AddRoleRequest) (*user2.AddRoleResponse, error) {
	l := logic2.NewAddRoleLogic(ctx, s.svcCtx)
	return l.AddRole(in)
}

func (s *UserServer) EditRole(ctx context.Context, in *user2.EditRoleRequest) (*user2.EditRoleResponse, error) {
	l := logic2.NewEditRoleLogic(ctx, s.svcCtx)
	return l.EditRole(in)
}

func (s *UserServer) DeleteRole(ctx context.Context, in *user2.DeleteRoleRequest) (*user2.DeleteRoleResponse, error) {
	l := logic2.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

func (s *UserServer) FindRoleByIds(ctx context.Context, in *user2.FindRoleByIdsRequest) (*user2.FindRoleByIdsResponse, error) {
	l := logic2.NewFindRoleByIdsLogic(ctx, s.svcCtx)
	return l.FindRoleByIds(in)
}

//  permission
func (s *UserServer) GetPermission(ctx context.Context, in *user2.GetPermissionRequest) (*user2.GetPermissionResponse, error) {
	l := logic2.NewGetPermissionLogic(ctx, s.svcCtx)
	return l.GetPermission(in)
}

func (s *UserServer) AddPermission(ctx context.Context, in *user2.AddPermissionRequest) (*user2.AddPermissionResponse, error) {
	l := logic2.NewAddPermissionLogic(ctx, s.svcCtx)
	return l.AddPermission(in)
}

func (s *UserServer) EditPermission(ctx context.Context, in *user2.EditPermissionRequest) (*user2.EditPermissionResponse, error) {
	l := logic2.NewEditPermissionLogic(ctx, s.svcCtx)
	return l.EditPermission(in)
}

func (s *UserServer) DeletePermission(ctx context.Context, in *user2.DeletePermissionRequest) (*user2.DeletePermissionResponse, error) {
	l := logic2.NewDeletePermissionLogic(ctx, s.svcCtx)
	return l.DeletePermission(in)
}

func (s *UserServer) FindPermissionByIds(ctx context.Context, in *user2.FindPermissionByIdsRequest) (*user2.FindPermissionByIdsResponse, error) {
	l := logic2.NewFindPermissionByIdsLogic(ctx, s.svcCtx)
	return l.FindPermissionByIds(in)
}

//  api
func (s *UserServer) GetApi(ctx context.Context, in *user2.GetApiRequest) (*user2.GetApiResponse, error) {
	l := logic2.NewGetApiLogic(ctx, s.svcCtx)
	return l.GetApi(in)
}

func (s *UserServer) AddApi(ctx context.Context, in *user2.AddApiRequest) (*user2.AddApiResponse, error) {
	l := logic2.NewAddApiLogic(ctx, s.svcCtx)
	return l.AddApi(in)
}

func (s *UserServer) BatchApi(ctx context.Context, in *user2.AddBatchApiRequest) (*user2.AddBatchApiResponse, error) {
	l := logic2.NewBatchApiLogic(ctx, s.svcCtx)
	return l.BatchApi(in)
}

func (s *UserServer) EditApi(ctx context.Context, in *user2.EditApiRequest) (*user2.EditApiResponse, error) {
	l := logic2.NewEditApiLogic(ctx, s.svcCtx)
	return l.EditApi(in)
}

func (s *UserServer) DeleteApi(ctx context.Context, in *user2.DeleteApiRequest) (*user2.DeleteApiResponse, error) {
	l := logic2.NewDeleteApiLogic(ctx, s.svcCtx)
	return l.DeleteApi(in)
}

func (s *UserServer) FindApiByIds(ctx context.Context, in *user2.FindApiByIdsRequest) (*user2.FindApiByIdsResponse, error) {
	l := logic2.NewFindApiByIdsLogic(ctx, s.svcCtx)
	return l.FindApiByIds(in)
}
