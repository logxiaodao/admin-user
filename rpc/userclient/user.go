// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	user2 "admin-user/rpc/user"
	"context"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	RoleInfo                    = user2.RoleInfo
	DeleteRoleResponse          = user2.DeleteRoleResponse
	PermissionInfo              = user2.PermissionInfo
	AddAdminResponse            = user2.AddAdminResponse
	EditApiRequest              = user2.EditApiRequest
	GetApiResponse              = user2.GetApiResponse
	DeleteApiResponse           = user2.DeleteApiResponse
	LoginOutRequest             = user2.LoginOutRequest
	AddPermissionRequest        = user2.AddPermissionRequest
	EditPermissionResponse      = user2.EditPermissionResponse
	EditPermissionRequest       = user2.EditPermissionRequest
	AddApiRequest               = user2.AddApiRequest
	GetRoleResponse             = user2.GetRoleResponse
	EditRoleRequest             = user2.EditRoleRequest
	GetAdminRequest             = user2.GetAdminRequest
	GetPermissionRequest        = user2.GetPermissionRequest
	FindPermissionByIdsRequest  = user2.FindPermissionByIdsRequest
	AddPermissionResponse       = user2.AddPermissionResponse
	LoginResponse               = user2.LoginResponse
	LoginOutResponse            = user2.LoginOutResponse
	AdminInfo                   = user2.AdminInfo
	FindPermissionByIdsResponse = user2.FindPermissionByIdsResponse
	FindApiByIdsRequest         = user2.FindApiByIdsRequest
	AddBatchApiResponse         = user2.AddBatchApiResponse
	DeletePermissionRequest     = user2.DeletePermissionRequest
	AddRoleResponse             = user2.AddRoleResponse
	FindAdminByIdsResponse      = user2.FindAdminByIdsResponse
	DeleteAdminResponse         = user2.DeleteAdminResponse
	FindRoleByIdsRequest        = user2.FindRoleByIdsRequest
	FindApiByIdsResponse        = user2.FindApiByIdsResponse
	DeleteAdminRequest          = user2.DeleteAdminRequest
	GetRoleRequest              = user2.GetRoleRequest
	AddAdminRequest             = user2.AddAdminRequest
	EditAdminRequest            = user2.EditAdminRequest
	ApiInfo                     = user2.ApiInfo
	GetApiRequest               = user2.GetApiRequest
	FindAdminByIdsRequest       = user2.FindAdminByIdsRequest
	CheckPermissionRequest      = user2.CheckPermissionRequest
	AddBatchApiRequest          = user2.AddBatchApiRequest
	EditApiResponse             = user2.EditApiResponse
	DeleteApiRequest            = user2.DeleteApiRequest
	CheckPermissionResponse     = user2.CheckPermissionResponse
	EditRoleResponse            = user2.EditRoleResponse
	GetPermissionResponse       = user2.GetPermissionResponse
	AddApiResponse              = user2.AddApiResponse
	GetAdminResponse            = user2.GetAdminResponse
	FindRoleByIdsResponse       = user2.FindRoleByIdsResponse
	AddRoleRequest              = user2.AddRoleRequest
	DeletePermissionResponse    = user2.DeletePermissionResponse
	EditAdminResponse           = user2.EditAdminResponse
	DeleteRoleRequest           = user2.DeleteRoleRequest
	LoginRequest                = user2.LoginRequest
	UpdatePasswordRequest       = user2.UpdatePasswordRequest
	UpdatePasswordResponse      = user2.UpdatePasswordResponse

	User interface {
		//  user
		Login(ctx context.Context, in *LoginRequest) (*LoginResponse, error)
		//  account
		LoginOut(ctx context.Context, in *LoginOutRequest) (*LoginOutResponse, error)
		UpdatePassword(ctx context.Context, in *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
		CheckPermission(ctx context.Context, in *CheckPermissionRequest) (*CheckPermissionResponse, error)
		//  admin
		GetAdmin(ctx context.Context, in *GetAdminRequest) (*GetAdminResponse, error)
		AddAdmin(ctx context.Context, in *AddAdminRequest) (*AddAdminResponse, error)
		EditAdmin(ctx context.Context, in *EditAdminRequest) (*EditAdminResponse, error)
		DeleteAdmin(ctx context.Context, in *DeleteAdminRequest) (*DeleteAdminResponse, error)
		FindAdminByIds(ctx context.Context, in *FindAdminByIdsRequest) (*FindAdminByIdsResponse, error)
		//  role
		GetRole(ctx context.Context, in *GetRoleRequest) (*GetRoleResponse, error)
		AddRole(ctx context.Context, in *AddRoleRequest) (*AddRoleResponse, error)
		EditRole(ctx context.Context, in *EditRoleRequest) (*EditRoleResponse, error)
		DeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error)
		FindRoleByIds(ctx context.Context, in *FindRoleByIdsRequest) (*FindRoleByIdsResponse, error)
		//  permission
		GetPermission(ctx context.Context, in *GetPermissionRequest) (*GetPermissionResponse, error)
		AddPermission(ctx context.Context, in *AddPermissionRequest) (*AddPermissionResponse, error)
		EditPermission(ctx context.Context, in *EditPermissionRequest) (*EditPermissionResponse, error)
		DeletePermission(ctx context.Context, in *DeletePermissionRequest) (*DeletePermissionResponse, error)
		FindPermissionByIds(ctx context.Context, in *FindPermissionByIdsRequest) (*FindPermissionByIdsResponse, error)
		//  api
		GetApi(ctx context.Context, in *GetApiRequest) (*GetApiResponse, error)
		AddApi(ctx context.Context, in *AddApiRequest) (*AddApiResponse, error)
		BatchApi(ctx context.Context, in *AddBatchApiRequest) (*AddBatchApiResponse, error)
		EditApi(ctx context.Context, in *EditApiRequest) (*EditApiResponse, error)
		DeleteApi(ctx context.Context, in *DeleteApiRequest) (*DeleteApiResponse, error)
		FindApiByIds(ctx context.Context, in *FindApiByIdsRequest) (*FindApiByIdsResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

//  user
func (m *defaultUser) Login(ctx context.Context, in *LoginRequest) (*LoginResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in)
}

//  account
func (m *defaultUser) LoginOut(ctx context.Context, in *LoginOutRequest) (*LoginOutResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.LoginOut(ctx, in)
}

func (m *defaultUser) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.UpdatePassword(ctx, in)
}

func (m *defaultUser) CheckPermission(ctx context.Context, in *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.CheckPermission(ctx, in)
}

//  admin
func (m *defaultUser) GetAdmin(ctx context.Context, in *GetAdminRequest) (*GetAdminResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.GetAdmin(ctx, in)
}

func (m *defaultUser) AddAdmin(ctx context.Context, in *AddAdminRequest) (*AddAdminResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.AddAdmin(ctx, in)
}

func (m *defaultUser) EditAdmin(ctx context.Context, in *EditAdminRequest) (*EditAdminResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.EditAdmin(ctx, in)
}

func (m *defaultUser) DeleteAdmin(ctx context.Context, in *DeleteAdminRequest) (*DeleteAdminResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.DeleteAdmin(ctx, in)
}

func (m *defaultUser) FindAdminByIds(ctx context.Context, in *FindAdminByIdsRequest) (*FindAdminByIdsResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.FindAdminByIds(ctx, in)
}

//  role
func (m *defaultUser) GetRole(ctx context.Context, in *GetRoleRequest) (*GetRoleResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.GetRole(ctx, in)
}

func (m *defaultUser) AddRole(ctx context.Context, in *AddRoleRequest) (*AddRoleResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.AddRole(ctx, in)
}

func (m *defaultUser) EditRole(ctx context.Context, in *EditRoleRequest) (*EditRoleResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.EditRole(ctx, in)
}

func (m *defaultUser) DeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.DeleteRole(ctx, in)
}

func (m *defaultUser) FindRoleByIds(ctx context.Context, in *FindRoleByIdsRequest) (*FindRoleByIdsResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.FindRoleByIds(ctx, in)
}

//  permission
func (m *defaultUser) GetPermission(ctx context.Context, in *GetPermissionRequest) (*GetPermissionResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.GetPermission(ctx, in)
}

func (m *defaultUser) AddPermission(ctx context.Context, in *AddPermissionRequest) (*AddPermissionResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.AddPermission(ctx, in)
}

func (m *defaultUser) EditPermission(ctx context.Context, in *EditPermissionRequest) (*EditPermissionResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.EditPermission(ctx, in)
}

func (m *defaultUser) DeletePermission(ctx context.Context, in *DeletePermissionRequest) (*DeletePermissionResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.DeletePermission(ctx, in)
}

func (m *defaultUser) FindPermissionByIds(ctx context.Context, in *FindPermissionByIdsRequest) (*FindPermissionByIdsResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.FindPermissionByIds(ctx, in)
}

//  api
func (m *defaultUser) GetApi(ctx context.Context, in *GetApiRequest) (*GetApiResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.GetApi(ctx, in)
}

func (m *defaultUser) AddApi(ctx context.Context, in *AddApiRequest) (*AddApiResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.AddApi(ctx, in)
}

func (m *defaultUser) BatchApi(ctx context.Context, in *AddBatchApiRequest) (*AddBatchApiResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.BatchApi(ctx, in)
}

func (m *defaultUser) EditApi(ctx context.Context, in *EditApiRequest) (*EditApiResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.EditApi(ctx, in)
}

func (m *defaultUser) DeleteApi(ctx context.Context, in *DeleteApiRequest) (*DeleteApiResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.DeleteApi(ctx, in)
}

func (m *defaultUser) FindApiByIds(ctx context.Context, in *FindApiByIdsRequest) (*FindApiByIdsResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.FindApiByIds(ctx, in)
}
